corMat2[which(dcMat[genes, genes] > negDCCut &
dcMat[genes, genes] < posDCCut, arr.ind = TRUE)] <- 0
L <- averageLayout(corMat1, corMat2,
repulsion = repulsion, layout = layout)
labelColor <- rep(labelCol, ncol(corMat1))
labelColor[colnames(corMat1) %in% geneList1] <- labelCol1
labelColor[colnames(corMat1) %in% geneList2] <- labelCol2
if (is.null(cond1Title)) {
cond1Title <- levels(condition)[1]
}
if (is.null(cond2Title)) {
cond2Title <- levels(condition)[2]
}
p1 <- qgraph(corMat1, layout = L,
labels = colnames(corMat1),
label.cex = labelCex,
minimum = minimum,
maximum = maximum,
cut = cut,
vsize = 0,
label.color = labelColor,
posCol = posCol,
negCol = negCol,
title = cond1Title,
...)
p1 <- qgraph(corMat1, layout = L,
labels = colnames(corMat1),
label.cex = labelCex,
minimum = minimum,
maximum = maximum,
cut = cut,
vsize = 0,
label.color = labelColor,
posCol = posCol,
negCol = negCol,
title = cond1Title)
cond1Title <- levels(condition)[1]
cond2Title <- levels(condition)[2]
p1 <- qgraph(corMat1, layout = L,
labels = colnames(corMat1),
label.cex = labelCex,
minimum = minimum,
maximum = maximum,
cut = cut,
vsize = 0,
label.color = labelColor,
posCol = posCol,
negCol = negCol,
title = cond1Title,
...)
p1 <- qgraph(corMat1, layout = L,
labels = colnames(corMat1),
label.cex = labelCex,
minimum = minimum,
maximum = maximum,
cut = cut,
vsize = 0,
label.color = labelColor,
posCol = posCol,
negCol = negCol,
title = cond1Title)
p1 <- qgraph(corMat1, layout = L,
labels = colnames(corMat1),
label.cex = 5,
minimum = minimum,
maximum = maximum,
cut = cut,
vsize = 0,
label.color = labelColor,
posCol = posCol,
negCol = negCol,
title = cond1Title)
p1 <- qgraph(corMat1, layout = L,
labels = colnames(corMat1),
label.cex = 20,
minimum = minimum,
maximum = maximum,
cut = cut,
vsize = 0,
label.color = labelColor,
posCol = posCol,
negCol = negCol,
title = cond1Title)
p1 <- qgraph(corMat1, layout = L,
labels = colnames(corMat1),
label.cex = 0.5,
minimum = minimum,
maximum = maximum,
cut = cut,
vsize = 0,
label.color = labelColor,
posCol = posCol,
negCol = negCol,
title = cond1Title)
p1 <- qgraph(corMat1, layout = L,
labels = colnames(corMat1),
label.cex = 0.5,
label.scale = FALSE,
minimum = minimum,
maximum = maximum,
cut = cut,
vsize = 0,
label.color = labelColor,
posCol = posCol,
negCol = negCol,
title = cond1Title)
p1 <- qgraph(corMat1, layout = L,
labels = colnames(corMat1),
label.cex = 5,
label.scale = FALSE,
minimum = minimum,
maximum = maximum,
cut = cut,
vsize = 0,
label.color = labelColor,
posCol = posCol,
negCol = negCol,
title = cond1Title)
p1 <- qgraph(corMat1, layout = L,
labels = colnames(corMat1),
label.cex = 1,
label.scale = FALSE,
minimum = minimum,
maximum = maximum,
cut = cut,
vsize = 0,
label.color = labelColor,
posCol = posCol,
negCol = negCol,
title = cond1Title,
...)
p1 <- qgraph(corMat1, layout = L,
labels = colnames(corMat1),
label.cex = 1,
label.scale = FALSE,
minimum = minimum,
maximum = maximum,
cut = cut,
vsize = 0,
label.color = labelColor,
posCol = posCol,
negCol = negCol,
title = cond1Title)
devtools::build("~/cosinet/")
devtools::build("C:/R/cosinet/")
install.packages("C:/R/cosinet_0.99.1.tar.gz", repos = NULL, type = "source")
browseVignettes(cosinet)
browseVignettes("cosinet")
devtools::build("C:/R/cosinet/")
install.packages("C:/R/cosinet_0.99.1.tar.gz", repos = NULL, type = "source")
browseVignettes("cosinet")
devtools::build("C:/R/cosinet/")
install.packages("C:/R/cosinet_0.99.1.tar.gz", repos = NULL, type = "source")
browseVignettes("cosinet")
devtools::build("C:/R/cosinet/")
testMat <- matrix(data = 0:11, nrow = 3)
testMat[2, 2] <- 0
testMat <- log2(testMat + 0.1)
matPreprocess(exprMat = testMat,
condition = c(1, 1, 2, 2),
minSample = 2, minExp = 1, logTrans = TRUE,
logBase = 2, pseudoCount = 0.1)
library(cosinet)
matPreprocess(exprMat = testMat,
condition = c(1, 1, 2, 2),
minSample = 2, minExp = 1, logTrans = TRUE,
logBase = 2, pseudoCount = 0.1)
testMat <- matrix(data = 0:11, nrow = 3)
testMat[2, 2] <- 0
testMat[2, 3] <- 0.0001
testMat <- log2(testMat + 0.1)
library(cosinet)
matPreprocess(exprMat = testMat,
condition = c(1, 1, 2, 2),
minSample = 2, minExp = 1, logTrans = TRUE,
logBase = 2, pseudoCount = 0.1)
matPreprocess(exprMat = testMat,
condition = c(1, 1, 2, 2),
minSample = 2, minExp = log2(0.1), logTrans = TRUE,
logBase = 2, pseudoCount = 0.1)
testMat <- matrix(data = 0:11, nrow = 3)
testMat[2, 2] <- 0
testMat[2, 3] <- 0.0000001
testMat <- log2(testMat + 0.1)
testMat
testMat <- matrix(data = 0:11, nrow = 3)
testMat[2, 2] <- 0
testMat[2, 3] <- 0.0000001
testMat
testMat <- log2(testMat + 0.1)
library(cosinet)
matPreprocess(exprMat = testMat,
condition = c(1, 1, 2, 2),
minSample = 2, minExp = log2(0.1), logTrans = TRUE,
logBase = 2, pseudoCount = 0.1)
testMat <- matrix(data = 0:20, nrow = 3)
testMat[2, 2] <- 0
testMat[2, 3] <- 0.0000001
testMat
testMat <- matrix(data = 0:20, nrow = 3)
testMat[2, 2] <- 0
testMat[2, 3] <- 0.0000001
testMat
testMat <- matrix(data = 0:20, nrow = 3)
testMat[2, 2] <- 0
testMat[2, 3] <- 0.0000001
testMat[2, 6] <- 0
testMat[3, 6] <- 0
testMat
testMat <- log2(testMat + 0.1)
library(cosinet)
matPreprocess(exprMat = testMat,
condition = c(1, 1, 1, 1, 2,2, 2),
minSample = 2, minExp = log2(0.1), logTrans = TRUE,
logBase = 2, pseudoCount = 0.1)
library(cosinet)
matPreprocess(exprMat = testMat,
condition = c(1, 1, 1, 1, 2,2, 2),
minSample = 2, minExp = log2(0.1), logTrans = FALSE,
logBase = 2, pseudoCount = 0.1)
testMat <- matrix(data = 0:20, nrow = 3)
testMat[2, 2] <- 0
testMat[2, 3] <- 0.0000001
testMat[2, 1] <- 0
testMat[2, 6] <- 0
testMat[3, 6] <- 0
testMat
testMat <- log2(testMat + 0.1)
library(cosinet)
matPreprocess(exprMat = testMat,
condition = c(1, 1, 1, 1, 2,2, 2),
minSample = 2, minExp = log2(0.1), logTrans = FALSE,
logBase = 2, pseudoCount = 0.1)
testMat <- matrix(data = 0:20, nrow = 3)
testMat[2, 2] <- 0
testMat[2, 3] <- 0.0000001
testMat[2, 1] <- 0
testMat[2, 4] <- 0
testMat[2, 6] <- 0
testMat[3, 6] <- 0
testMat
testMat <- log2(testMat + 0.1)
library(cosinet)
matPreprocess(exprMat = testMat,
condition = c(1, 1, 1, 1, 2,2, 2),
minSample = 2, minExp = log2(0.1), logTrans = FALSE,
logBase = 2, pseudoCount = 0.1)
testMat <- matrix(data = 0:20, nrow = 3)
testMat[2, 2] <- 0
testMat[2, 3] <- 0.00000000001
testMat[2, 1] <- 0
testMat[2, 6] <- 0
testMat[3, 6] <- 0
testMat
testMat <- log2(testMat + 0.1)
library(cosinet)
matPreprocess(exprMat = testMat,
condition = c(1, 1, 1, 1, 2,2, 2),
minSample = 2, minExp = log2(0.1), logTrans = FALSE,
logBase = 2, pseudoCount = 0.1)
roxygen2::roxygenize()
roxygen2::roxygenize("C:/R/cosinet")
roxygen2::roxygenize("C:/R/cosinet")
devtools::build("C:/R/cosinet")
install.packages("C:/R/cosinet_0.99.1.tar.gz", repos = NULL, type = "source")
devtools::create("SCSAR")
use_gpl3_license()
?use_gpl3_license
usethis::use_gpl3_license()
usethis::use_gpl3_license("C:/R/SCSAR")
usethis::use_gpl3_license("C:/R/SCSAR/")
setwd("C:/R/SCSAR/")
usethis::use_gpl3_license()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
?mean
?sd
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
?missing
roxygen2::roxygenise()
roxygen2::roxygenise()
cellMarkerDB <- readRDS("C:/R/cellMarkerDB.rds")
usethis::use_data(cellMarkerDB, internal = TRUE)
cellTaxoDB <- readRDS("C:/R/cellTaxoDB.rds")
usethis::use_data(cellTaxoDB, internal = TRUE)
usethis::use_data(cellMarkerDB, cellTaxoDB, internal = TRUE)
usethis::use_data(cellMarkerDB, cellTaxoDB, internal = TRUE, overwrite = TRUE)
? openxlsx::saveWorkbook
?cor
if (!require("DT")) install.packages('DT')
library(DT)
library(dplyr)
install.packages("DT")
install.packages("DT")
library(DT)
library(DT)
roxygen2::roxygenise()
?colnames
?as.data.frame
roxygen2::roxygenise()
roxygen2::roxygenise()
?seq
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
pbmc3kDEGs <- readRDS("C:/R/pbmc3kDEGs.rds")
usethis::use_data(pbmc3kDEGs)
dim(pbmc3kDEGs)
pbmc3kDEGs
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
devtools::build()
devtools::check_built("C:/R/SCSAR_1.0.0.tar.gz")
devtools::build()
devtools::check_built("C:/R/SCSAR_1.0.0.tar.gz")
usethis::use_pipe()
devtools::check_built("C:/R/SCSAR_1.0.0.tar.gz")
devtools::build()
devtools::check_built("C:/R/SCSAR_1.0.0.tar.gz")
devtools::build()
devtools::check_built("C:/R/SCSAR_1.0.0.tar.gz")
devtools::build()
devtools::check_built("C:/R/SCSAR_1.0.0.tar.gz")
roxygen2::roxygenise()
devtools::build()
devtools::check_built("C:/R/SCSAR_1.0.0.tar.gz")
roxygen2::roxygenise()
devtools::build()
devtools::check_built("C:/R/SCSAR_1.0.0.tar.gz")
devtools::build()
roxygen2::roxygenise()
devtools::build()
devtools::check_built("C:/R/SCSAR_1.0.0.tar.gz")
roxygen2::roxygenise()
devtools::build()
devtools::check_built("C:/R/SCSAR_1.0.0.tar.gz")
library(SCSAR)
SCSAR:::cellTaxoDB
roxygen2::roxygenise()
devtools::build()
devtools::check_built("C:/R/SCSAR_1.0.0.tar.gz")
cellTaxoDB
SCSAR::pbmc3kDEGs
pbmc3kDEGs
clusterDEGs = pbmc3kDEGs
species = "Homo sapiens"
clusters = "all"
species="Homo sapiens"
outFile=NA
clusters="all"
cutoffLFC=1
cutoffPval=0.05
topCell=5
topMarker=5
panelty=-0.1
paneltyCutoffLFC=cutoffLFC
logBase=exp(1)
pseudoCount=1
cellTaxonomySupport <- function(markerDB,
species="Homo sapiens",
logBase=exp(1),
pseudoCount=1) {
stopifnot(!missing(markerDB))
speciesAll <- tolower(sort(unique(markerDB$species)))
markerDB <- markerDB[!is.na(markerDB$species) &
!is.na(markerDB$Symbol) &
!is.na(markerDB$PMID), ]
markerDB$species <- tolower(markerDB$species)
species <- tolower(species)
if("all" %in% tolower(species)) {
species <- speciesAll
}
if (!all(species %in% speciesAll)) {
stop("Species",
paste(species[!species %in% speciesAll], collapse = ", "),
" not in the marker database.",
" To explore the available species,",
" use the showCellTaxoSpecies() function.")
}
markerDB2Use <- markerDB[markerDB$species %in% species,
c("species", "cell_name",
"Symbol", "PMID")]
markerDB2Use$cellInfo <- paste(markerDB2Use$species,
markerDB2Use$cell_name, sep = ":")
pmidCounts <- markerDB2Use %>%
group_by(cellInfo, Symbol) %>%
summarise(count = n_distinct(PMID))
# Spread the data into a matrix format
pmidCounts <- pmidCounts  %>%
tidyr::spread(Symbol, count)
cellInfo <- pmidCounts$cellInfo
pmidCounts <- as.matrix(pmidCounts[, -1])
row.names(pmidCounts) <- cellInfo
pmidCounts[is.na(pmidCounts)] <- 0
markerEvi <- log(pmidCounts + pseudoCount, base = logBase)
pmidCountsCellInfo <- markerDB2Use %>%
group_by(cellInfo) %>%
summarise(count = n_distinct(PMID))
pmidCountsCellInfo <-
pmidCountsCellInfo[match(rownames(pmidCounts),
pmidCountsCellInfo$cellInfo), ]
markerCountsCellInfo <- markerDB2Use %>%
group_by(cellInfo) %>%
summarise(count = n_distinct(Symbol))
markerCountsCellInfo <-
markerCountsCellInfo[match(rownames(pmidCounts),
markerCountsCellInfo$cellInfo), ]
cellInfoEvi <- log(pmidCountsCellInfo$count * markerCountsCellInfo$count +
pseudoCount, base = logBase)
names(cellInfoEvi) <- rownames(pmidCounts)
weight <- markerEvi * cellInfoEvi
return(weight)
}
cellTypeIdentifier <- function(clusterDEGs,
markerEviMat,
clusters="all",
cutoffLFC=1,
cutoffPval=0.05,
topCell=5,
topMarker=5,
panelty=-0.1,
paneltyCutoffLFC=cutoffLFC) {
stopifnot(!missing(clusterDEGs))
stopifnot(!missing(markerEviMat))
if("all" %in% tolower(clusters)) {
clusters <- sort(unique(clusterDEGs$cluster))
}
res <- list()
for (i in seq_along(clusters)) {
cluster <- clusters[i]
thisClusterDEGsAll <- clusterDEGs[clusterDEGs$cluster %in% cluster &
clusterDEGs$gene %in%
colnames(markerEviMat),
c("gene", "p_val", "avg_log2FC")]
thisClusterDEGs <-
thisClusterDEGsAll[thisClusterDEGsAll$p_val <= cutoffPval &
thisClusterDEGsAll$avg_log2FC >= cutoffLFC,]
clusterMarkers <- thisClusterDEGs$gene
message("Estimating identity of cell cluster ", cluster,
" based on ", length(clusterMarkers),
" cluster marker genes...")
# Retain only cell types that have at least one marker gene that is DEG
thisMarkerEviMat <- markerEviMat[, clusterMarkers, drop = FALSE]
thisMarkerEviMat <- thisMarkerEviMat[rowSums(thisMarkerEviMat) > 0, ,
drop = FALSE]
# Remove genes that are not the marker gene for any remaining cell types
thisMarkerEviMat <-  markerEviMat[rownames(thisMarkerEviMat), ]
thisMarkerEviMat <- thisMarkerEviMat[, colSums(thisMarkerEviMat) > 0]
# Initialize weight vector with penalty score
weightVec <- rep(panelty, ncol(thisMarkerEviMat))
names(weightVec) <- colnames(thisMarkerEviMat)
# Assign weights for supporting marker genes
weightVec[thisClusterDEGs$gene] <- thisClusterDEGs$avg_log2FC
# For genes with avg_log2FC above paneltyCutoffLFC, set penalty to 0,
# so that these genes neither add to nor lower the cell type score
noPaneltyGene <-
thisClusterDEGsAll$gene[thisClusterDEGsAll$gene %in%
names(weightVec) &
thisClusterDEGsAll$p_val <= cutoffPval &
thisClusterDEGsAll$avg_log2FC >=
paneltyCutoffLFC &
thisClusterDEGsAll$avg_log2FC <
cutoffLFC]
weightVec[noPaneltyGene] <- 0
score <- thisMarkerEviMat %*% weightVec
colnames(score) <- "score"
score <- score[order(score, decreasing = TRUE), , drop = FALSE]
zscore <- (score - mean(score)) / sd(score)
zscore <- zscore[zscore > 0, , drop = FALSE]
zscore <- zscore[1:min(topCell, nrow(zscore)), , drop = FALSE]
zscore <- round(zscore, 2)
markerGeneScore <-
t(t(thisMarkerEviMat[rownames(zscore), ]) * weightVec)
markerGenes <-
apply(markerGeneScore, 1, function(x) {
markerScore <- sort(x[x>0], decreasing = TRUE)
markerScore <-
markerScore[1:min(topMarker, length(markerScore))]
paste(paste(names(markerScore),
round(markerScore, 0), sep = " "), collapse = ", ")
})
resInfo <- as.data.frame(zscore)
resInfo$topMarkers <- markerGenes
res[[paste("cluster", cluster)]] <- resInfo
}
message("Done.")
return(res)
}
stopifnot(!missing(clusterDEGs))
markerDB <- cellTaxoAnno
markerEviMat <- cellTaxonomySupport(markerDB = markerDB,
species=species,
logBase = logBase,
pseudoCount = pseudoCount)
markerDB <- cellTaxoAnno
